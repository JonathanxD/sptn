/**
 *      sptn - Provides utility for multiple data in single container, such as Pair and Triple.
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2021 JonathanxD <https://github.com/JonathanxD/sptn>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.sptn

import com.github.jonathanxd.kores.base.Annotation
import com.github.jonathanxd.kores.base.InterfaceDeclaration
import com.github.jonathanxd.kores.base.MethodDeclaration
import com.github.jonathanxd.kores.base.Retention
import com.github.jonathanxd.kores.base.comment.Comments
import com.github.jonathanxd.kores.base.comment.Link
import com.github.jonathanxd.kores.base.comment.Plain
import com.github.jonathanxd.kores.generic.GenericSignature
import com.github.jonathanxd.kores.type.Generic
import com.github.jonathanxd.kores.type.PlainKoresType

abstract class FunctionalInterfaceGenerator(val n: Int) : Generator<InterfaceDeclaration> {
    open val packagee: String get() = "com.github.jonathanxd.sptn.function"
    abstract val name: String

    val typeNames = List(n) {
        "$packagee.$name${it + 1}"
    }

    val genericNames = List(n) {
        "T${it + 1}"
    }

    val genericTypes = List(n) {
        Generic.type(this.genericNames[it])
    }

    val fieldNames = List(n) {
        "data${it + 1}"
    }

    val typeNamesWithGeneric = List(n) {
        val types = (0..it).map { Generic.type(genericNames[it]) }
        Generic.type(PlainKoresType(typeNames[it], false)).of(*types.toTypedArray())
    }

    val typeNamesWithWildcard = List(n) {
        val types = (0..it).map { Generic.wildcard() }
        Generic.type(PlainKoresType(typeNames[it], false)).of(*types.toTypedArray())
    }

    override fun generate(c: (InterfaceDeclaration) -> Unit) {
        for (x in 0 until this.n) {
            c(this.generateDeclaration(x))
        }
    }

    fun generateDeclaration(number: Int): InterfaceDeclaration {
        val name = this.typeNames[number]

        return InterfaceDeclaration.Builder.builder()
            .annotations(Annotation(type = FunctionalInterface::class.java, emptyMap(), Retention.RUNTIME))
            .comments(
                Comments(
                    listOf(
                        Plain("Interface generated by "),
                        Link("sptn", Link.LinkTarget.URL("https://github.com/JonathanxD/sptn"))
                    ),
                    Comments.Type.DOCUMENTATION
                )
            )
            .run { apply(number, this) }
            .publicModifier()
            .qualifiedName(name)
            .genericSignature(this.generateGenericSignature(number))
            .methods(
                listOf(this.generateFunction(number))
            )
            .build()
    }

    abstract fun generateGenericSignature(number: Int): GenericSignature

    abstract fun generateFunction(number: Int): MethodDeclaration

    open fun apply(number: Int, i: InterfaceDeclaration.Builder): InterfaceDeclaration.Builder = i
    open fun apply(m: MethodDeclaration.Builder): MethodDeclaration.Builder = m
}