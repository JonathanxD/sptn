/**
 *      sptn - Provides utility for multiple data in single container, such as Pair and Triple.
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2021 JonathanxD <https://github.com/JonathanxD/sptn>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.sptn

import com.github.jonathanxd.kores.Instruction
import com.github.jonathanxd.kores.Instructions
import com.github.jonathanxd.kores.Types
import com.github.jonathanxd.kores.base.*
import com.github.jonathanxd.kores.base.comment.Comments
import com.github.jonathanxd.kores.base.comment.Link
import com.github.jonathanxd.kores.base.comment.Plain
import com.github.jonathanxd.kores.common.invokeHash
import com.github.jonathanxd.kores.common.invokeObjectsEquals
import com.github.jonathanxd.kores.factory.*
import com.github.jonathanxd.kores.generic.GenericSignature
import com.github.jonathanxd.kores.literal.Literals
import com.github.jonathanxd.kores.operator.Operators
import com.github.jonathanxd.kores.type.Generic
import com.github.jonathanxd.kores.type.PlainKoresType
import com.github.jonathanxd.kores.type.concreteType

class TupleGenerator(val n: Int): Generator<ClassDeclaration> {
    val typeNames = List(n) {
        "com.github.jonathanxd.sptn.tuple.Tuple${it + 1}"
    }

    val simpleTypeNames = List(n) {
        "Tuple${it + 1}"
    }

    val genericNames = List(n) {
        "T${it + 1}"
    }

    val genericTypes = List(n) {
        Generic.type(this.genericNames[it])
    }

    val typeNamesWithGeneric = List(n) {
        val types = (0..it).map { Generic.type(genericNames[it]) }
        Generic.type(PlainKoresType(typeNames[it], false)).of(*types.toTypedArray())
    }

    val typeNamesWithWildcard = List(n) {
        val types = (0..it).map { Generic.wildcard() }
        Generic.type(PlainKoresType(typeNames[it], false)).of(*types.toTypedArray())
    }

    val fieldNames = List(n) {
        "data${it + 1}"
    }

    val getterNames = List(n) {
        "get${it + 1}"
    }

    val componentNames = List(n) {
        "component${it + 1}"
    }

    override fun generate(c: (ClassDeclaration) -> Unit) {
        for (x in 0 until this.n) {
            c(this.generateDeclaration(x))
        }
    }

    fun generateDeclaration(number: Int): ClassDeclaration {
        val name = this.typeNames[number]
        val previous = if (number - 1 > 0) this.typeNames[number - 1] else null
        val next = if (number + 1 < this.typeNames.size) this.typeNames[number + 1] else null

        return ClassDeclaration.Builder.builder()
            .comments(Comments(
                listOf(Plain("Class generated by "), Link("sptn", Link.LinkTarget.URL("https://github.com/JonathanxD/sptn"))),
                Comments.Type.DOCUMENTATION
            ))
            .publicModifier()
            .qualifiedName(name)
            .genericSignature(this.generateGenericSignature(number))
            .fields(this.generateFields(number))
            .constructors(this.generateConstructor(number))
            .methods(
                listOf(this.generateFactory(number)) +
                        this.generateGetters(number) +
                        (if (next != null) listOf(this.generatePlus(number)) else emptyList()) +
                        (if (previous != null) listOf(this.generateMinus(number)) else emptyList()) +
                        this.generateToString(number) +
                        this.generateEquals(number) +
                        this.generateHash(number)
            )
            .build()
    }

    fun generateGenericSignature(number: Int): GenericSignature =
        GenericSignature.create(
            (0..number).map {
                Generic.type(this.genericNames[it])
            }
        )

    fun generateFields(number: Int): List<FieldDeclaration> =
        (0..number).map {
            FieldDeclaration.Builder.builder()
                .modifiers(KoresModifier.PRIVATE, KoresModifier.FINAL)
                .type(Generic.type(this.genericNames[it]))
                .name(this.fieldNames[it])
                .build()
        }

    fun generateConstructor(number: Int): ConstructorDeclaration =
        ConstructorDeclaration.Builder.builder()
            .publicModifier()
            .parameters(
                (0..number).map {
                    KoresParameter.Builder.builder()
                        .type(Generic.type(this.genericNames[it]))
                        .name(this.fieldNames[it])
                        .build()
                }
            )
            .body(Instructions.fromIterable(
                (0..number).map {
                    setThisFieldValue(
                        Generic.type(this.genericNames[it]),
                        this.fieldNames[it],
                        accessVariable(Generic.type(this.genericNames[it]), this.fieldNames[it])
                    )
                }
            ))
            .build()

    fun generateGetters(number: Int): List<MethodDeclaration> =
        (0..number).flatMap {
            listOf(this.getterNames[it], this.componentNames[it]).map { name ->
                MethodDeclaration.Builder.builder()
                    .publicModifier()
                    .name(name)
                    .returnType(Generic.type(this.genericNames[it]))
                    .body(
                        Instructions.fromPart(
                            returnValue(accessThisField(Generic.type(this.genericNames[it]), this.fieldNames[it]))
                        )
                    )
                    .build()
            }
        }

    fun generateFactory(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .modifiers(KoresModifier.PUBLIC, KoresModifier.STATIC)
            .name("of")
            .genericSignature(this.generateGenericSignature(number))
            .returnType(this.typeNamesWithGeneric[number])
            .parameters(
                (0..number).map {
                    KoresParameter.Builder.builder()
                        .type(Generic.type(this.genericNames[it]))
                        .name(this.fieldNames[it])
                        .build()
                }
            )
            .body(Instructions.fromPart(
                returnValue(this.typeNamesWithGeneric[number], this.typeNamesWithGeneric[number].invokeConstructor(
                    TypeSpec(Types.VOID, this.genericTypes.subList(0, number)),
                    (0..number).map {
                        accessVariable(Generic.type(this.genericNames[it]), this.fieldNames[it])
                    }
                ))
            ))
            .build()

    fun generateToString(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .publicModifier()
            .name("toString")
            .returnType(Types.STRING)
            .body(Instructions.fromPart(
                returnValue(Types.STRING, concat()
                    .concatenations(
                        listOf(
                            Literals.STRING(this.simpleTypeNames[number]),
                            Literals.STRING("(")
                        ) + (0..number).mapIndexed { index, it ->
                            concat()
                                .concatenations(
                                    listOf(
                                        Literals.STRING("${it + 1} = '"),
                                        this.invokeGetter(it),
                                        Literals.STRING("'")
                                    ) +
                                            if (index + 1 < number) listOf(Literals.STRING(", ")) else emptyList()
                                )
                                .build()
                        } + listOf(Literals.STRING(")"))
                    )
                    .build()
                )
            ))
            .build()

    fun generateEquals(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .publicModifier()
            .name("equals")
            .returnType(Types.BOOLEAN)
            .parameters(
                KoresParameter(
                    type = Types.OBJECT,
                    name = "other",
                    annotations = emptyList(),
                    modifiers = emptySet()
                )
            )
            .body(Instructions.fromIterable(
                listOf(
                    ifStm().expressions(
                        ifExpr(
                            isInstanceOf(
                                accessVariable(type = Types.OBJECT, name = "other"),
                                this.typeNamesWithGeneric[number].concreteType
                            ),
                            Operators.NOT_EQUAL_TO,
                            Literals.TRUE
                        )
                    ).body(
                        Instructions.fromPart(returnValue(Types.BOOLEAN, Literals.FALSE))
                    ).build(),
                    variable(
                        this.typeNamesWithWildcard[number],
                        "otherTuple",
                        cast(
                            this.typeNamesWithWildcard[number],
                            accessVariable(type = Types.OBJECT, name = "other")
                        )
                    ),
                    returnValue(Types.BOOLEAN, IfGroup(ifExprs(
                        *(0..number).map {
                            ifExpr(
                                this.invokeGetter(it).invokeObjectsEquals(
                                    this.invokeGetter(
                                        it,
                                        accessVariable(this.typeNamesWithWildcard[number], "otherTuple")
                                    )
                                ),
                                Operators.EQUAL_TO,
                                Literals.TRUE
                            )
                        }.flatMapIndexed { index: Int, ifExpr: IfExpr ->
                            if (index + 1 <= number) {
                                listOf(ifExpr, Operators.AND)
                            } else {
                                listOf(ifExpr)
                            }
                        }.toTypedArray()
                    )))
                )
            ))
            .build()

    fun generateHash(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .publicModifier()
            .name("hashCode")
            .returnType(Types.INT)
            .body(Instructions.fromIterable(
                listOf(
                    returnValue(Types.INT,
                        (0..number).map {
                            this.invokeGetter(it)
                        }.invokeHash()
                    )
                )
            ))
            .build()

    fun generatePlus(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .publicModifier()
            .name("plus")
            .genericSignature(GenericSignature.create(Generic.type(this.genericNames[number + 1])))
            .returnType(this.typeNamesWithGeneric[number + 1])
            .parameters(
                KoresParameter.Builder.builder()
                    .type(Generic.type(this.genericNames[number + 1]))
                    .name(this.fieldNames[number + 1])
                    .build()
            )
            .body(Instructions.fromPart(
                returnValue(invokeStatic(
                    this.typeNamesWithGeneric[number + 1].concreteType,
                    Access.STATIC,
                    "of",
                    TypeSpec(this.typeNamesWithGeneric[number + 1], this.genericTypes.subList(0, number)),
                    (0..number).map { invokeGetter(it) } +
                            listOf(
                                accessVariable(
                                    Generic.type(this.genericNames[number + 1]),
                                    this.fieldNames[number + 1]
                                )
                            )
                ))
            ))
            .build()

    fun generateMinus(number: Int): MethodDeclaration =
        MethodDeclaration.Builder.builder()
            .publicModifier()
            .name("minus")
            .returnType(this.typeNamesWithGeneric[number - 1])
            .body(Instructions.fromPart(
                returnValue(invokeStatic(
                    this.typeNamesWithGeneric[number - 1].concreteType,
                    Access.STATIC,
                    "of",
                    TypeSpec(this.typeNamesWithGeneric[number - 1], this.genericTypes.subList(0, number - 1)),
                    (0 until number).map { invokeGetter(it) }
                ))
            ))
            .build()

    fun invokeGetter(number: Int): MethodInvocation =
        Access.THIS.invokeVirtual(
            Alias.THIS,
            this.getterNames[number],
            TypeSpec(this.genericTypes[number]),
            emptyList()
        )

    fun invokeGetter(number: Int, access: Instruction): MethodInvocation =
        access.invokeVirtual(
            Alias.THIS,
            this.getterNames[number],
            TypeSpec(this.genericTypes[number]),
            emptyList()
        )
}