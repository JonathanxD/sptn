/**
 *      sptn - Provides utility for multiple data in single container, such as Pair and Triple.
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2021 JonathanxD <https://github.com/JonathanxD/sptn>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.sptn.tuple;

import com.github.jonathanxd.sptn.tuple.Tuple8;
import com.github.jonathanxd.sptn.tuple.Tuple6;
import java.util.Objects;

/**
 * Class generated by <a href="https://github.com/JonathanxD/sptn">sptn</a>
 */
public class Tuple7<T1,T2,T3,T4,T5,T6,T7> {

    private final T1 data1;
    private final T2 data2;
    private final T3 data3;
    private final T4 data4;
    private final T5 data5;
    private final T6 data6;
    private final T7 data7;

    public Tuple7(T1 data1, T2 data2, T3 data3, T4 data4, T5 data5, T6 data6, T7 data7) {
        this.data1 = data1;
        this.data2 = data2;
        this.data3 = data3;
        this.data4 = data4;
        this.data5 = data5;
        this.data6 = data6;
        this.data7 = data7;
    }

    public static <T1,T2,T3,T4,T5,T6,T7> Tuple7<T1, T2, T3, T4, T5, T6, T7> of(T1 data1, T2 data2, T3 data3, T4 data4, T5 data5, T6 data6, T7 data7) {
        return new Tuple7<T1, T2, T3, T4, T5, T6, T7>(data1, data2, data3, data4, data5, data6, data7);
    }

    public T1 get1() {
        return this.data1;
    }

    public T1 component1() {
        return this.data1;
    }

    public T2 get2() {
        return this.data2;
    }

    public T2 component2() {
        return this.data2;
    }

    public T3 get3() {
        return this.data3;
    }

    public T3 component3() {
        return this.data3;
    }

    public T4 get4() {
        return this.data4;
    }

    public T4 component4() {
        return this.data4;
    }

    public T5 get5() {
        return this.data5;
    }

    public T5 component5() {
        return this.data5;
    }

    public T6 get6() {
        return this.data6;
    }

    public T6 component6() {
        return this.data6;
    }

    public T7 get7() {
        return this.data7;
    }

    public T7 component7() {
        return this.data7;
    }

    public <T8> Tuple8<T1, T2, T3, T4, T5, T6, T7, T8> plus(T8 data8) {
        return Tuple8.of(this.get1(), this.get2(), this.get3(), this.get4(), this.get5(), this.get6(), this.get7(), data8);
    }

    public Tuple6<T1, T2, T3, T4, T5, T6> minus() {
        return Tuple6.of(this.get1(), this.get2(), this.get3(), this.get4(), this.get5(), this.get6());
    }

    public String toString() {
        return "Tuple7" + "(" + "1 = '" + this.get1() + "'" + ", " + "2 = '" + this.get2() + "'" + ", " + "3 = '" + this.get3() + "'" + ", " + "4 = '" + this.get4() + "'" + ", " + "5 = '" + this.get5() + "'" + ", " + "6 = '" + this.get6() + "'" + "7 = '" + this.get7() + "'" + ")";
    }

    public boolean equals(Object other) {
        if (!(other instanceof Tuple7)) {
            return false;
        }
        Tuple7<?, ?, ?, ?, ?, ?, ?> otherTuple = (Tuple7<?, ?, ?, ?, ?, ?, ?>)other;
        return (Objects.equals(this.get1(), otherTuple.get1()) && Objects.equals(this.get2(), otherTuple.get2()) && Objects.equals(this.get3(), otherTuple.get3()) && Objects.equals(this.get4(), otherTuple.get4()) && Objects.equals(this.get5(), otherTuple.get5()) && Objects.equals(this.get6(), otherTuple.get6()) && Objects.equals(this.get7(), otherTuple.get7()));
    }

    public int hashCode() {
        return Objects.hash(new Object[]{this.get1(), this.get2(), this.get3(), this.get4(), this.get5(), this.get6(), this.get7()});
    }
}
