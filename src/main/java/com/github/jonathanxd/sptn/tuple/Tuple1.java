/**
 *      sptn - Provides utility for multiple data in single container, such as Pair and Triple.
 *
 *         The MIT License (MIT)
 *
 *      Copyright (c) 2021 JonathanxD <https://github.com/JonathanxD/sptn>
 *      Copyright (c) contributors
 *
 *
 *      Permission is hereby granted, free of charge, to any person obtaining a copy
 *      of this software and associated documentation files (the "Software"), to deal
 *      in the Software without restriction, including without limitation the rights
 *      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *      copies of the Software, and to permit persons to whom the Software is
 *      furnished to do so, subject to the following conditions:
 *
 *      The above copyright notice and this permission notice shall be included in
 *      all copies or substantial portions of the Software.
 *
 *      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *      THE SOFTWARE.
 */
package com.github.jonathanxd.sptn.tuple;

import com.github.jonathanxd.sptn.tuple.Tuple2;
import java.util.Objects;

/**
 * Class generated by <a href="https://github.com/JonathanxD/sptn">sptn</a>
 */
public class Tuple1<T1> {

    private final T1 data1;

    public Tuple1(T1 data1) {
        this.data1 = data1;
    }

    public static <T1> Tuple1<T1> of(T1 data1) {
        return new Tuple1<T1>(data1);
    }

    public T1 get1() {
        return this.data1;
    }

    public T1 component1() {
        return this.data1;
    }

    public <T2> Tuple2<T1, T2> plus(T2 data2) {
        return Tuple2.of(this.get1(), data2);
    }

    public String toString() {
        return "Tuple1" + "(" + "1 = '" + this.get1() + "'" + ")";
    }

    public boolean equals(Object other) {
        if (!(other instanceof Tuple1)) {
            return false;
        }
        Tuple1<?> otherTuple = (Tuple1<?>)other;
        return (Objects.equals(this.get1(), otherTuple.get1()));
    }

    public int hashCode() {
        return Objects.hash(new Object[]{this.get1()});
    }
}
